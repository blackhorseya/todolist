// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/blackhorseya/todolist/configs"
	"github.com/blackhorseya/todolist/app/domain/repository"
	"github.com/blackhorseya/todolist/app/usecase"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Injectors from wire.go:

// InitializeApp 初始化應用程式
func InitializeApp(configPath string) (*NewApp, error) {
	config, err := configs.LoadEnv(configPath)
	if err != nil {
		return nil, err
	}
	client, err := provideMongoClient(config)
	if err != nil {
		return nil, err
	}
	todoRepository := provideTodoRepo(client)
	categoryRepository := provideCategoryRepo(client)
	todoUseCase := provideNewTodoUseCase(todoRepository, categoryRepository)
	categoryUseCase := provideNewCategoryUseCase(categoryRepository)
	newApp := ProvideApp(config, todoUseCase, categoryUseCase)
	return newApp, nil
}

// wire.go:

// NewApp 建立應用程式實例
type NewApp struct {
	Config          *configs.Config
	TodoUseCase     usecase.TodoUseCase
	CategoryUseCase usecase.CategoryUseCase
}

// ProvideApp 提供應用程式實例
func ProvideApp(
	config *configs.Config,
	todoUC usecase.TodoUseCase,
	categoryUC usecase.CategoryUseCase,
) *NewApp {
	return &NewApp{
		Config:          config,
		TodoUseCase:     todoUC,
		CategoryUseCase: categoryUC,
	}
}

// provideMongoClient 提供 MongoDB 客戶端
func provideMongoClient(config *configs.Config) (*mongo.Client, error) {
	client, err := mongo.Connect(context.Background(), options.Client().ApplyURI(config.Database.GetDSN()))
	if err != nil {
		return nil, err
	}
	return client, nil
}

// provideTodoRepo 提供待辦事項儲存庫
func provideTodoRepo(client *mongo.Client) repository.TodoRepository {

	return nil
}

// provideCategoryRepo 提供分類儲存庫
func provideCategoryRepo(client *mongo.Client) repository.CategoryRepository {

	return nil
}

// provideNewTodoUseCase 提供待辦事項使用案例
func provideNewTodoUseCase(todoRepo repository.TodoRepository, categoryRepo repository.CategoryRepository) usecase.TodoUseCase {
	return usecase.NewTodoUseCase(todoRepo, categoryRepo)
}

// provideNewCategoryUseCase 提供分類使用案例
func provideNewCategoryUseCase(repo repository.CategoryRepository) usecase.CategoryUseCase {
	return usecase.NewCategoryUseCase(repo)
}

var providerSet = wire.NewSet(configs.LoadEnv, provideMongoClient,

	provideTodoRepo,
	provideCategoryRepo,

	provideNewTodoUseCase,
	provideNewCategoryUseCase,

	ProvideApp,
)
